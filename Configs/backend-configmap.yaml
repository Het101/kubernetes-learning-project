apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-code
data:
  server.js: |
    const express = require('express');
    const cors = require('cors');
    const { Pool } = require('pg');
    const app = express();
    const PORT = process.env.PORT || 3000;

    // Database configuration
    const pool = new Pool({
      host: process.env.DB_HOST || 'postgres',
      port: process.env.DB_PORT || 5432,
      database: process.env.DB_NAME || 'taskdb',
      user: process.env.DB_USER || 'postgres',
      password: process.env.DB_PASSWORD || 'password123',
      max: 20,
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 2000,
    });

    // Middleware
    app.use(cors());
    app.use(express.json());

    // Database connection check
    async function checkDatabase() {
      try {
        const client = await pool.connect();
        await client.query('SELECT 1');
        client.release();
        console.log('✅ Database connected successfully');
        return true;
      } catch (error) {
        console.error('❌ Database connection failed:', error.message);
        return false;
      }
    }

    // Routes
    app.get('/api/health', async (req, res) => {
      const dbHealth = await checkDatabase();
      res.json({ 
        status: dbHealth ? 'healthy' : 'unhealthy',
        database: dbHealth ? 'connected' : 'disconnected',
        timestamp: new Date().toISOString() 
      });
    });

    app.get('/api/tasks', async (req, res) => {
      try {
        const result = await pool.query('SELECT * FROM tasks ORDER BY created_at DESC');
        res.json(result.rows);
      } catch (error) {
        console.error('Error fetching tasks:', error);
        res.status(500).json({ error: 'Failed to fetch tasks' });
      }
    });

    app.post('/api/tasks', async (req, res) => {
      try {
        const { title } = req.body;
        if (!title || title.trim() === '') {
          return res.status(400).json({ error: 'Title is required' });
        }
        
        const result = await pool.query(
          'INSERT INTO tasks (title, completed) VALUES ($1, $2) RETURNING *',
          [title.trim(), false]
        );
        
        res.status(201).json(result.rows[0]);
      } catch (error) {
        console.error('Error creating task:', error);
        res.status(500).json({ error: 'Failed to create task' });
      }
    });

    app.put('/api/tasks/:id', async (req, res) => {
      try {
        const id = parseInt(req.params.id);
        if (isNaN(id)) {
          return res.status(400).json({ error: 'Invalid task ID' });
        }
        
        const result = await pool.query(
          'UPDATE tasks SET completed = NOT completed, updated_at = CURRENT_TIMESTAMP WHERE id = $1 RETURNING *',
          [id]
        );
        
        if (result.rows.length === 0) {
          return res.status(404).json({ error: 'Task not found' });
        }
        
        res.json(result.rows[0]);
      } catch (error) {
        console.error('Error updating task:', error);
        res.status(500).json({ error: 'Failed to update task' });
      }
    });

    app.delete('/api/tasks/:id', async (req, res) => {
      try {
        const id = parseInt(req.params.id);
        if (isNaN(id)) {
          return res.status(400).json({ error: 'Invalid task ID' });
        }
        
        const result = await pool.query('DELETE FROM tasks WHERE id = $1 RETURNING *', [id]);
        
        if (result.rows.length === 0) {
          return res.status(404).json({ error: 'Task not found' });
        }
        
        res.status(204).send();
      } catch (error) {
        console.error('Error deleting task:', error);
        res.status(500).json({ error: 'Failed to delete task' });
      }
    });

    // Graceful shutdown
    process.on('SIGTERM', async () => {
      console.log('Received SIGTERM, shutting down gracefully...');
      await pool.end();
      process.exit(0);
    });

    // Start server
    app.listen(PORT, () => {
      console.log(`🚀 API server running on port ${PORT}`);
      checkDatabase();
    });
  package.json: |
    {
      "name": "task-api",
      "version": "1.0.0",
      "description": "Task management API with PostgreSQL",
      "main": "server.js",
      "dependencies": {
        "express": "^4.18.2",
        "cors": "^2.8.5",
        "pg": "^8.11.3"
      },
      "scripts": {
        "start": "node server.js",
        "dev": "nodemon server.js"
      }
    }